(this["webpackJsonppikaso-documentation"]=this["webpackJsonppikaso-documentation"]||[]).push([[17],{146:function(e,t,n){"use strict";n.r(t),n.d(t,"HeartModel",(function(){return c}));var a=n(105),r=n(108),i=n(293),s=n(314),o=n(259),c=function(e){Object(i.a)(n,e);var t=Object(s.a)(n);function n(){return Object(a.a)(this,n),t.apply(this,arguments)}return Object(r.a)(n,[{key:"type",get:function(){return"heart"}},{key:"rotate",value:function(e){Object(o.g)(this.node,e),this.board.events.emit("shape:rotate",{shapes:[this]})}}]),n}(o.d)},148:function(e,t,n){"use strict";n.r(t),n.d(t,"HeartDrawer",(function(){return l}));var a=n(37),r=n(105),i=n(108),s=n(510),o=n(291),c=n(293),h=n(314),d=n(259),u=n(146),l=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var a;return Object(r.a)(this,n),(a=t.call(this,e,"Heart")).node=null,a}return Object(i.a)(n,[{key:"insert",value:function(e){return Object(s.a)(Object(o.a)(n.prototype),"insert",this).call(this,e)}},{key:"draw",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(s.a)(Object(o.a)(n.prototype),"draw",this).call(this,e)}},{key:"createShape",value:function(e){return this.node=new d.a.Path(Object(a.a)(Object(a.a)({fill:"red"},e),{},{data:"M12 21.593c-5.63-5.539-11-10.297-11-14.402 0-3.791 3.068-5.191 5.281-5.191 1.312 0 4.151.501 5.719 4.457 1.59-3.968 4.464-4.447 5.726-4.447 2.54 0 5.274 1.621 5.274 5.181 0 4.069-5.136 8.625-11 14.402"})),new u.HeartModel(this.board,this.node)}},{key:"onStartDrawing",value:function(){Object(s.a)(Object(o.a)(n.prototype),"onStartDrawing",this).call(this),this.isDrawing&&this.createShape(Object(a.a)({x:this.startPoint.x,y:this.startPoint.y,scaleX:0,scaleY:0},this.config))}},{key:"onDrawing",value:function(e){if(Object(s.a)(Object(o.a)(n.prototype),"onDrawing",this).call(this,e),this.node){var t=this.board.stage.getPointerPosition(),a=Object(d.f)(t,this.getShapePosition());this.node.setAttrs({x:t.x-this.node.width(),scaleX:a/10,scaleY:a/10})}}}]),n}(d.c)},251:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var a=n(37),r=n(100),i=n(860),s=n(859),o=n(2),c=["children"];function h(e){var t=e.children,n=Object(r.a)(e,c);return Object(o.jsx)(i.a,Object(a.a)(Object(a.a)({style:s.a,showLineNumbers:!0,wrapLongLines:!0},n),{},{children:t}))}},252:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var a=n(37),r=n(100),i=n(0),s=n(257),o=n(258),c=n(49),h=n(251),d=n(2),u=["node","inline","className","children"];function l(e){var t=e.children,n="string"===typeof t?t:t(),l=Object(i.useMemo)((function(){return function(e){for(var t=[],n=e.split("\n"),a=!1,r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.startsWith("```")||e.startsWith("~~~")},i=0;i<n.length;i++){var s=n[i];r(s)&&(a=!0),t.push(a?s:s.trim()),a&&r(n[i+1])&&(a=!1)}return t.join("\n")}(n)}),[n]);return Object(d.jsx)(s.a,{skipHtml:!0,remarkPlugins:[o.a],children:l,components:{a:function(e){var t=e.href,n=e.children;return(null===t||void 0===t?void 0:t.startsWith("/api/"))||(null===t||void 0===t?void 0:t.startsWith("http"))?Object(d.jsx)("a",{href:t,target:"_blank",children:n}):Object(d.jsx)(c.b,{to:t,children:n})},code:function(e){e.node;var t=e.inline,n=e.className,i=e.children,s=Object(r.a)(e,u),o=/language-(\w+)/.exec(n||"");return!t&&o?Object(d.jsx)(h.a,Object(a.a)({children:String(i).replace(/\n$/,""),language:o[1],PreTag:"div"},s)):Object(d.jsx)("code",Object(a.a)(Object(a.a)({className:n},s),{},{children:i}))}}})}},253:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(37),r=n(11),i=n(0),s=n(259);function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=Object(i.useState)(null),o=Object(r.a)(n,2),c=o[0],h=o[1],d=Object(i.useRef)(null);return Object(i.useEffect)((function(){var n=new s.b(Object(a.a)({container:d.current},e),t);h(n)}),[]),Object(i.useEffect)((function(){c&&window.addEventListener("resize",(function(){c.board.rescale()}))}),[c]),[d,c]}},263:function(e,t,n){"use strict";var a=n(0),r={restoreOnUnmount:!1};t.a="undefined"!==typeof document?function(e,t){void 0===t&&(t=r);var n=Object(a.useRef)(document.title);document.title!==e&&(document.title=e),Object(a.useEffect)((function(){return t&&t.restoreOnUnmount?function(){document.title=n.current}:void 0}),[])}:function(e){}},66:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var a=n(11),r=n(0),i=n(242),s=n(263),o=n(253),c=n(252),h=n(148),d=n(2);function u(){Object(s.a)("Pikaso | Advanced | Create Custom Shapes");var e=Object(o.a)({selection:{transformer:{borderStroke:"#262626",anchorFill:"#262626"}}},(function(e){return{heart:new h.HeartDrawer(e)}})),t=Object(a.a)(e,2),n=t[0],u=t[1];return Object(r.useEffect)((function(){if(u){var e=u.shapes.heart.insert({x:100,y:100,scale:{x:6,y:6}});e.to({duration:10,x:u.board.stage.width()-e.node.width()}),u.shapes.heart.draw()}}),[u]),Object(d.jsxs)("div",{children:[Object(d.jsx)(i.a,{mb:3,children:Object(d.jsx)("div",{ref:n,style:{margin:"0 auto",background:"#CBC3E3",width:"100%",height:"300px"}})}),Object(d.jsx)(c.a,{children:"# Create Custom Shapes\n\nPikaso comes with a couple of built-in [Shapes](/core/shapes) that cover most of the use cases.\n\nBecause of its strong OOP architecture this makes it possible to easily extend [ShapeDrawer](/api/classes/ShapeDrawer.html) and [ShapeModel](/api/classes/ShapeModel.html) in order to create any custom shape.\n\nFor example, let's create a custom Heart![heart](/shapes/heart.svg) heart shape.\n\n[ShapeDrawer](/api/classes/ShapeDrawer.html) and [ShapeModel](/api/classes/ShapeModel.html) need to be extended to let us create our model and register it with Shapes.\n\nLet's start with HeartModel. Since we will be drawing an SVG heart, we should have our model like this. \n\nThe rest will be handled by Pikaso, however you can change any Method of [ShapeModel](/api/classes/ShapeModel.html) for your needs.\n\n```ts\nimport { Konva, ShapeModel } from 'pikaso'\n\nexport class HeartModel extends ShapeModel<Konva.Path, Konva.PathConfig> {\n  public get type() {\n    return 'heart'\n  }\n}\n```\n\nThe next step is to describe how the heart shape should draw itself on the canvas.\n\n```ts\nimport { Konva, Board, ShapeDrawer, getPointsDistance } from 'pikaso'\n\nimport { HeartModel } from './HeartModel'\n\nexport class HeartDrawer extends ShapeDrawer<Konva.Path, Konva.PathConfig> {\n  public node: Konva.Path | null = null\n\n  constructor(board: Board) {\n    super(board, 'Heart')\n  }\n\n  public insert(config: Konva.PathConfig): HeartModel {\n    return super.insert(config)\n  }\n\n  public draw(config: Partial<Konva.PathConfig> = {}) {\n    super.draw(config)\n  }\n\n  protected createShape(config: Omit<Konva.PathConfig, 'data'>): HeartModel {\n    this.node = new Konva.Path({\n      fill: 'red',\n      ...config,\n      data: 'M12 21.593c-5.63-5.539-11-10.297-11-14.402 0-3.791 3.068-5.191 5.281-5.191 1.312 0 4.151.501 5.719 4.457 1.59-3.968 4.464-4.447 5.726-4.447 2.54 0 5.274 1.621 5.274 5.181 0 4.069-5.136 8.625-11 14.402'\n    })\n\n    return new HeartModel(this.board, this.node)\n  }\n\n  /**\n   * Starts drawing a heart shape\n   */\n  protected onStartDrawing() {\n    super.onStartDrawing()\n\n    if (!this.isDrawing) {\n      return\n    }\n\n    this.createShape({\n      x: this.startPoint.x,\n      y: this.startPoint.y,\n      scaleX: 0,\n      scaleY: 0,\n      ...this.config\n    })\n  }\n\n  /**\n   * Continues drawing the heart by changing its scale\n   */\n  protected onDrawing(e: Konva.KonvaEventObject<MouseEvent>) {\n    super.onDrawing(e)\n\n    if (!this.node) {\n      return\n    }\n\n    const point = this.board.stage.getPointerPosition()!\n    const distance = getPointsDistance(point, this.getShapePosition())\n\n    this.node.setAttrs({\n      x: point.x - this.node.width(),\n      scaleX: distance / 10,\n      scaleY: distance / 10\n    })\n  }\n}\n```\n\nThat's all!\nThe final step is to register the heart shape model.\n\n```ts\nimport type { BaseShapes } from 'pikaso'\n\ninterface Shapes extends BaseShapes {\n  heart: HeartDrawer\n}\n\nconst editor = new Pikaso<Shapes>(\n  {\n    container: <the element>,\n    ...options\n  },\n  board => ({\n    heart: new HeartDrawer(board)\n  })\n)\n```\n\nWe can now insert or draw a heart shape on the canvas like other built-in shapes.\n\n```ts\n// create the heart shape\neditor.shapes.heart.insert({\n  x: 100,\n  y: 100,\n  scale: {\n    x: 6,\n    y: 6\n  }\n})\n\n// start drawing heart shape\neditor.shapes.heart.insert()\n```\n\n"})]})}}}]);
//# sourceMappingURL=17.ec4f380f.chunk.js.map