{"version":3,"file":"static/js/5445.fa4c2f4f.chunk.js","mappings":"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","sources":["components/BasePopover/index.tsx","components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","pages/Core/Drawing/index.tsx","utils/get-random-color/index.ts"],"sourcesContent":["import { useState } from 'react'\nimport { Button, Popover } from '@mui/material'\n\ninterface ButtonProps {\n  id: string | undefined\n  isOpen: boolean\n}\n\ninterface Props {\n  buttonRenderer: (buttonProps: ButtonProps) => React.ReactNode\n  children:\n    | React.ReactNode\n    | (({ close }: { close: () => void }) => React.ReactNode)\n}\n\nexport function BasePopover({ buttonRenderer, children }: Props) {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null)\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n  const id = open ? `base-popover` : undefined\n\n  return (\n    <>\n      <Button\n        disableRipple\n        aria-describedby={id}\n        style={{\n          background: 'none',\n          cursor: 'pointer'\n        }}\n        onClick={handleOpen}\n      >\n        {buttonRenderer({\n          id,\n          isOpen: open\n        })}\n      </Button>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n      >\n        {typeof children === 'function'\n          ? children({ close: handleClose })\n          : children}\n      </Popover>\n    </>\n  )\n}\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dracula as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// materialDark\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { Link } from 'react-router-dom'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      skipHtml\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        a({ href, children }) {\n          const isExternalLink =\n            href?.startsWith('/api/') || href?.startsWith('http')\n\n          return isExternalLink ? (\n            <a href={href} target=\"_blank\">\n              {children}\n            </a>\n          ) : (\n            <Link to={href!}>{children}</Link>\n          )\n        },\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings, BaseShapes, RegisterShapesFn } from 'pikaso'\n\nexport default function usePikaso<T extends BaseShapes = BaseShapes>(\n  options: Partial<Settings> = {},\n  registerShapes?: RegisterShapesFn<T>\n): [RefObject<HTMLDivElement>, Pikaso<T> | null] {\n  const [instance, setInstance] = useState<Pikaso<T> | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso<T>(\n      {\n        container: ref.current as HTMLDivElement,\n        ...options\n      },\n      registerShapes\n    )\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","import { useState, useEffect } from 'react'\nimport { Avatar, Box, Chip, IconButton, Tooltip } from '@mui/material'\nimport { useTitle } from 'react-use'\nimport raw from 'raw.macro'\n\nimport usePikaso from 'src/hooks/use-pikaso'\n\nimport { Markdown } from 'src/components/Markdown'\nimport { BasePopover } from 'src/components/BasePopover'\nimport { getRandomColor } from 'src/utils/get-random-color'\n\nconst doc = raw('./doc.md')\n\nconst Drawings = {\n  circle: {\n    title: 'Circle',\n    image: '/shapes/circle.svg',\n    config: {\n      fill: getRandomColor(),\n      stroke: getRandomColor()\n    }\n  },\n  ellipse: {\n    title: 'Ellipse',\n    image: '/shapes/ellipse.svg',\n    config: {\n      fill: getRandomColor(),\n      stroke: getRandomColor()\n    }\n  },\n  rect: {\n    title: 'Rectangle',\n    image: '/shapes/rectangle.svg',\n    config: {\n      fill: getRandomColor(),\n      stroke: getRandomColor()\n    }\n  },\n  polygon: {\n    title: 'Polygon',\n    image: '/shapes/polygon.svg',\n    config: {\n      sides: 5,\n      fill: getRandomColor(),\n      stroke: getRandomColor()\n    }\n  },\n  triangle: {\n    title: 'Triangle',\n    image: '/shapes/triangle.svg',\n    config: {\n      fill: getRandomColor(),\n      stroke: getRandomColor()\n    }\n  },\n  arrow: {\n    title: 'Arrow',\n    image: '/shapes/arrow.svg',\n    config: {\n      stroke: getRandomColor(),\n      strokeWidth: 15\n    }\n  },\n  line: {\n    title: 'Line',\n    image: '/shapes/line.svg',\n    config: {\n      stroke: getRandomColor(),\n      strokeWidth: 15\n    }\n  },\n  pencil: {\n    title: 'Free Style',\n    image: '/shapes/pen.svg',\n    config: {\n      stroke: getRandomColor(),\n      strokeWidth: 15\n    }\n  }\n}\n\ntype DrawingType = keyof typeof Drawings\n\nexport default function Drawing() {\n  useTitle('Pikaso | Core Components | Drawing')\n  const [activeDrawing, setActiveDrawing] = useState<DrawingType>('pencil')\n\n  const [ref, editor] = usePikaso({\n    selection: {\n      transformer: {\n        borderStroke: '#262626',\n        anchorFill: '#262626'\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (editor) {\n      editor.shapes.pencil.draw({\n        stroke: 'blue',\n        strokeWidth: 15\n      })\n    }\n  }, [editor])\n\n  const handleChangeDrawer = (shape: DrawingType) => {\n    if (!editor) {\n      return\n    }\n\n    editor.shapes[activeDrawing].stopDrawing()\n    editor.shapes[shape].draw(Drawings[shape].config as any)\n    setActiveDrawing(shape)\n  }\n\n  return (\n    <div>\n      <Markdown>{doc}</Markdown>\n\n      <Box mb={3}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#CBC3E3',\n            width: '100%',\n            height: '350px'\n          }}\n        />\n      </Box>\n\n      <BasePopover\n        buttonRenderer={({ id, isOpen }) => (\n          <Chip\n            aria-describedby={id}\n            size=\"medium\"\n            label={\n              <span>\n                Drawing <strong>{Drawings[activeDrawing].title}</strong>\n              </span>\n            }\n            variant=\"outlined\"\n            color=\"info\"\n            avatar={\n              <Avatar\n                variant=\"square\"\n                src={Drawings[activeDrawing].image}\n                sx={{\n                  width: 32,\n                  height: 32\n                }}\n              />\n            }\n            sx={{\n              cursor: 'pointer',\n              borderColor: isOpen ? 'primary.main' : 'info',\n              color: isOpen ? 'primary.main' : 'info'\n            }}\n          />\n        )}\n      >\n        {({ close }) => (\n          <>\n            {Object.entries(Drawings).map(([name, shape]) => (\n              <IconButton\n                key={shape.title}\n                sx={{ mr: 0.5 }}\n                onClick={() => {\n                  handleChangeDrawer(name as DrawingType)\n                  close()\n                }}\n              >\n                <Tooltip title={shape.title}>\n                  <Avatar\n                    variant=\"square\"\n                    src={shape.image}\n                    sx={{\n                      width: 32,\n                      height: 32\n                    }}\n                  />\n                </Tooltip>\n              </IconButton>\n            ))}\n          </>\n        )}\n      </BasePopover>\n    </div>\n  )\n}\n","export function getRandomColor() {\n  const o = Math.round,\n    r = Math.random,\n    s = 255\n\n  return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ')'\n}\n"],"names":["BasePopover","buttonRenderer","children","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","disableRipple","style","background","cursor","onClick","event","currentTarget","isOpen","onClose","anchorOrigin","vertical","horizontal","close","CodeHighlighter","props","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","skipHtml","remarkPlugins","gfm","components","a","href","target","to","code","node","inline","className","match","exec","String","replace","language","PreTag","usePikaso","options","registerShapes","instance","setInstance","ref","useRef","useEffect","editor","Pikaso","container","current","window","addEventListener","board","rescale","Drawings","circle","title","image","config","fill","getRandomColor","stroke","ellipse","rect","polygon","sides","triangle","arrow","strokeWidth","line","pencil","Drawing","useTitle","activeDrawing","setActiveDrawing","selection","transformer","borderStroke","anchorFill","shapes","draw","mb","margin","width","height","size","label","variant","color","avatar","src","sx","borderColor","Object","entries","map","name","shape","mr","stopDrawing","handleChangeDrawer","o","Math","round","r","random"],"sourceRoot":""}