{"version":3,"file":"static/js/654.d818d18e.chunk.js","mappings":"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","sources":["components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","pages/Core/Background/FillBackground.tsx","pages/Core/Background/LoadFromFile.tsx","pages/Core/Background/LoadFromUrl.tsx","pages/Core/Background/index.tsx","utils/get-random-color/index.ts","../node_modules/react-use/esm/useTitle.js"],"sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dracula as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// materialDark\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { Link } from 'react-router-dom'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      skipHtml\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        a({ href, children }) {\n          const isExternalLink =\n            href?.startsWith('/api/') || href?.startsWith('http')\n\n          return isExternalLink ? (\n            <a href={href} target=\"_blank\">\n              {children}\n            </a>\n          ) : (\n            <Link to={href!}>{children}</Link>\n          )\n        },\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings, BaseShapes, RegisterShapesFn } from 'pikaso'\n\nexport default function usePikaso<T extends BaseShapes = BaseShapes>(\n  options: Partial<Settings> = {},\n  registerShapes?: RegisterShapesFn<T>\n): [RefObject<HTMLDivElement>, Pikaso<T> | null] {\n  const [instance, setInstance] = useState<Pikaso<T> | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso<T>(\n      {\n        container: ref.current as HTMLDivElement,\n        ...options\n      },\n      registerShapes\n    )\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","import { useEffect } from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Card,\n  Box,\n  Button,\n  Typography,\n  CardActions,\n  CardContent\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\nimport { Markdown } from 'src/components/Markdown'\nimport usePikaso from 'src/hooks/use-pikaso'\nimport { getRandomColor } from 'src/utils/get-random-color'\n\nconst code = `// change background color\neditor.board.background.fill('#262626')`\n\nexport function FillBackground() {\n  const [ref, editor] = usePikaso()\n\n  useEffect(() => {\n    editor?.board.background.fill(getRandomColor())\n  }, [editor])\n\n  const handleChangeColor = () => {\n    editor?.board.background.fill(getRandomColor())\n  }\n\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography variant=\"h6\" sx={{ width: '30%', flexShrink: 0 }}>\n          fill\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Card sx={{ mb: 4 }}>\n          <Box my={1}>\n            <div\n              ref={ref}\n              style={{\n                margin: '0 auto',\n                background: '#f5f5f5',\n                width: '600px',\n                height: '400px'\n              }}\n            />\n          </Box>\n\n          <CardActions sx={{ justifyContent: 'flex-end' }}>\n            <Button variant=\"contained\" onClick={handleChangeColor}>\n              Change Background Color\n            </Button>\n          </CardActions>\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\" component=\"div\">\n              <Markdown>\n                {() => `[fill](/api/classes/Background.html#fill) `}\n              </Markdown>\n            </Typography>\n            <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n          </CardContent>\n        </Card>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Card,\n  Box,\n  Button,\n  Typography,\n  CardActions,\n  CardContent\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\nimport { Markdown } from 'src/components/Markdown'\nimport usePikaso from 'src/hooks/use-pikaso'\n\nconst code = `// load image file\neditor.board.background.setImageFromFile('<ImageFile>')\n\n// Alternatively, you may use\neditor.loadFromFile('<ImageFile>')`\n\nexport function LoadFromFile() {\n  const [ref, editor] = usePikaso()\n\n  const handleImageFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target?.files?.[0]\n\n    if (!file) {\n      return\n    }\n\n    editor?.loadFromFile(file)\n  }\n\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography variant=\"h6\" sx={{ width: '30%', flexShrink: 0 }}>\n          loadFromFile\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Card sx={{ mb: 4 }}>\n          <Box my={1}>\n            <div\n              ref={ref}\n              style={{\n                margin: '0 auto',\n                background: '#f5f5f5',\n                width: '600px',\n                height: '400px'\n              }}\n            />\n          </Box>\n\n          <CardActions sx={{ justifyContent: 'flex-end' }}>\n            <Button variant=\"contained\" component=\"label\">\n              Select Image From Computer\n              <input\n                accept=\"image/*\"\n                type=\"file\"\n                hidden\n                onChange={handleImageFile}\n              />\n            </Button>\n          </CardActions>\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\" component=\"div\">\n              <Markdown>\n                {() =>\n                  `[setImageFromFile](/api/classes/Background.html#setImageFromFile)`\n                }\n              </Markdown>\n            </Typography>\n            <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n          </CardContent>\n        </Card>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Card,\n  Box,\n  Button,\n  Typography,\n  CardActions,\n  CardContent\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\n\nimport { Markdown } from 'src/components/Markdown'\n\nimport usePikaso from 'src/hooks/use-pikaso'\n\nconst code = `// load image from url\neditor.board.background.setImageFromUrl('<ImageUrl>')\n\n// Alternatively, you may use\neditor.loadFromUrl('<ImageUrl>')`\n\nexport function LoadFromUrl() {\n  const [ref, editor] = usePikaso()\n\n  const handleLoadRandomBackground = () => {\n    editor?.board.background.setImageFromUrl(\n      `https://source.unsplash.com/random/600x400?hash=${Math.random()}`\n    )\n  }\n\n  return (\n    <Accordion expanded>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography variant=\"h6\" sx={{ width: '30%', flexShrink: 0 }}>\n          loadFromUrl\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Card sx={{ mb: 4 }}>\n          <Box my={1}>\n            <div\n              ref={ref}\n              style={{\n                margin: '0 auto',\n                background: '#f5f5f5',\n                width: '600px',\n                height: '400px'\n              }}\n            />\n          </Box>\n\n          <CardActions sx={{ justifyContent: 'flex-end' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleLoadRandomBackground}\n            >\n              Load Random Background\n            </Button>\n          </CardActions>\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\" component=\"div\">\n              <Markdown>\n                {() =>\n                  `[setImageFromUrl](/api/classes/Background.html#setImageFromUrl)`\n                }\n              </Markdown>\n            </Typography>\n            <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n          </CardContent>\n        </Card>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import raw from 'raw.macro'\n\nimport { useTitle } from 'react-use'\n\nimport { Markdown } from 'src/components/Markdown'\n\nimport { LoadFromFile } from './LoadFromFile'\nimport { LoadFromUrl } from './LoadFromUrl'\nimport { FillBackground } from './FillBackground'\n\nconst doc = raw('./doc.md')\n\nexport default function Background() {\n  useTitle('Pikaso | Core Components | Background')\n  return (\n    <>\n      <Markdown>{doc}</Markdown>\n\n      <LoadFromUrl />\n      <LoadFromFile />\n      <FillBackground />\n    </>\n  )\n}\n","export function getRandomColor() {\n  const o = Math.round,\n    r = Math.random,\n    s = 255\n\n  return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ')'\n}\n","import { useEffect, useRef } from 'react';\nvar DEFAULT_USE_TITLE_OPTIONS = {\n    restoreOnUnmount: false,\n};\nfunction useTitle(title, options) {\n    if (options === void 0) { options = DEFAULT_USE_TITLE_OPTIONS; }\n    var prevTitleRef = useRef(document.title);\n    if (document.title !== title)\n        document.title = title;\n    useEffect(function () {\n        if (options && options.restoreOnUnmount) {\n            return function () {\n                document.title = prevTitleRef.current;\n            };\n        }\n        else {\n            return;\n        }\n    }, []);\n}\nexport default typeof document !== 'undefined' ? useTitle : function (_title) { };\n"],"names":["CodeHighlighter","children","props","style","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","skipHtml","remarkPlugins","gfm","components","a","href","target","to","code","node","inline","className","match","exec","String","replace","language","PreTag","usePikaso","options","registerShapes","useState","instance","setInstance","ref","useRef","useEffect","editor","Pikaso","container","current","window","addEventListener","board","rescale","FillBackground","background","fill","getRandomColor","expandIcon","variant","sx","width","flexShrink","mb","my","margin","height","justifyContent","onClick","gutterBottom","component","LoadFromFile","accept","type","hidden","onChange","e","file","files","loadFromFile","LoadFromUrl","expanded","color","setImageFromUrl","Math","random","Background","useTitle","o","round","r","DEFAULT_USE_TITLE_OPTIONS","restoreOnUnmount","document","title","prevTitleRef","_title"],"sourceRoot":""}