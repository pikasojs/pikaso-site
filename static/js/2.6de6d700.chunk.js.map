{"version":3,"sources":["pages/Core/Background/LoadFromFile.tsx","pages/Core/Background/LoadFromUrl.tsx","components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","pages/Core/Background/index.tsx"],"names":["LoadFromFile","usePikaso","ref","editor","id","my","style","margin","background","width","height","language","variant","component","accept","type","hidden","onChange","e","file","target","files","loadFromFile","LoadFromUrl","color","onClick","board","setImageFromUrl","Math","random","CodeHighlighter","children","props","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","remarkPlugins","gfm","components","code","node","inline","className","match","exec","String","replace","PreTag","options","useState","instance","setInstance","useRef","useEffect","Pikaso","container","current","window","addEventListener","rescale","Background"],"mappings":"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","file":"static/js/2.6de6d700.chunk.js","sourcesContent":["import { Box, Button } from '@mui/material'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\nimport { Markdown } from 'src/components/Markdown'\nimport usePikaso from 'src/hooks/use-pikaso'\n\nconst code = `// load image file\neditor.board.background.setImageFromFile('<ImageFile>')\n\n// Alternatively, you may use\neditor.loadFromFile('<ImageFile>')`\n\nexport function LoadFromFile() {\n  const [ref, editor] = usePikaso()\n\n  const handleImageFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target?.files?.[0]\n\n    if (!file) {\n      return\n    }\n\n    editor?.loadFromFile(file)\n  }\n\n  return (\n    <>\n      <a id=\"load-image-from-file\"></a>\n      <Markdown>\n        {() => `\n        ### [Load image from file](#load-image-from-file)\n      `}\n      </Markdown>\n\n      <Box my={1}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#f5f5f5',\n            width: '250px',\n            height: '250px'\n          }}\n        />\n      </Box>\n\n      <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n\n      <Box my={2}>\n        <Button variant=\"contained\" component=\"label\">\n          Select Image From Computer\n          <input\n            accept=\"image/*\"\n            type=\"file\"\n            hidden\n            onChange={handleImageFile}\n          />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Box, Button } from '@mui/material'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\n\nimport { Markdown } from 'src/components/Markdown'\n\nimport usePikaso from 'src/hooks/use-pikaso'\n\nconst code = `// load image from url\neditor.board.background.setImageFromUrl('<ImageUrl>')\n\n// Alternatively, you may use\neditor.loadFromUrl('<ImageUrl>')`\n\nexport function LoadFromUrl() {\n  const [ref, editor] = usePikaso()\n\n  const handleLoadRandomBackground = () => {\n    editor?.board.background.setImageFromUrl(\n      `https://source.unsplash.com/random?hash=${Math.random()}`\n    )\n  }\n\n  return (\n    <>\n      <a id=\"load-image-from-url\"></a>\n      <Markdown>\n        {() => `\n        ### [Load image from url](#load-image-from-url)\n      `}\n      </Markdown>\n\n      <Box my={1}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#f5f5f5',\n            width: '250px',\n            height: '250px'\n          }}\n        />\n      </Box>\n\n      <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n\n      <Box my={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleLoadRandomBackground}\n        >\n          Load Random Background\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { materialDark as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n//cb\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings } from 'pikaso'\n\nexport default function usePikaso(\n  options: Partial<Settings> = {}\n): [RefObject<HTMLDivElement>, Pikaso | null] {\n  const [instance, setInstance] = useState<Pikaso | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso({\n      container: ref.current as HTMLDivElement,\n      ...options\n    })\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","import { Box } from '@mui/material'\n\nimport { Markdown } from 'src/components/Markdown'\n\nimport { LoadFromFile } from './LoadFromFile'\nimport { LoadFromUrl } from './LoadFromUrl'\n\nexport default function Background() {\n  return (\n    <>\n      <Markdown>\n        {() => `\n        # Background\n        \n        ### API Reference\n        **[classes/Background.html](/api/classes/Background.html)**\n\n        ### Usage\n      `}\n      </Markdown>\n\n      <Box my={10}>\n        <LoadFromUrl />\n      </Box>\n\n      <Box my={10}>\n        <LoadFromFile />\n      </Box>\n    </>\n  )\n}\n"],"sourceRoot":""}