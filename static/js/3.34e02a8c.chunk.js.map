{"version":3,"sources":["components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","pages/Core/Cropper/index.tsx"],"names":["CodeHighlighter","children","props","style","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","remarkPlugins","gfm","components","code","node","inline","className","match","exec","String","replace","language","PreTag","usePikaso","options","useState","instance","setInstance","ref","useRef","useEffect","editor","Pikaso","container","current","window","addEventListener","board","rescale","Cropper","isCropping","setIsCropping","keepRatio","circular","transformer","borderStroke","config","loadFromUrl","JSON","stringify","display","width","height","background","flexGrow","ml","my","variant","color","onClick","cropper","crop","start","state"],"mappings":"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","file":"static/js/3.34e02a8c.chunk.js","sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { materialDark as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n//cb\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings } from 'pikaso'\n\nexport default function usePikaso(\n  options: Partial<Settings> = {}\n): [RefObject<HTMLDivElement>, Pikaso | null] {\n  const [instance, setInstance] = useState<Pikaso | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso({\n      container: ref.current as HTMLDivElement,\n      ...options\n    })\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","import { Box, Button } from '@mui/material'\nimport type { CropperOptions } from 'pikaso'\nimport { useEffect, useState } from 'react'\n\nimport { CodeHighlighter } from 'src/components/CodeHighlighter'\nimport { Markdown } from 'src/components/Markdown'\nimport usePikaso from 'src/hooks/use-pikaso'\n\nexport default function Cropper() {\n  const [ref, editor] = usePikaso()\n\n  const [isCropping, setIsCropping] = useState(false)\n  const [config] = useState<Partial<CropperOptions>>({\n    keepRatio: false,\n    circular: true,\n    transformer: {\n      borderStroke: 'blue'\n    }\n  })\n\n  useEffect(() => {\n    editor && editor.loadFromUrl('https://source.unsplash.com/random')\n  }, [editor])\n\n  useEffect(() => {\n    editor &&\n      window.addEventListener('resize', () => {\n        editor.board.rescale()\n      })\n  }, [editor])\n\n  const handleCrop = () => {\n    if (isCropping) {\n      editor?.cropper.crop()\n    } else {\n      editor?.cropper.start(config)\n    }\n\n    setIsCropping(state => !state)\n  }\n\n  const code = `editor.cropper.start(${JSON.stringify(config, null, 4)})`\n\n  return (\n    <>\n      <Box>\n        <Markdown>\n          {() => `\n        # Cropper\n        Cropper component offers different types of croppings that are **Flexible Rectangle Cropping**, **Flexible Circular Cropping**, **Fixed Rectangle Cropping** and **Fixed Circular Cropping**.\n\n        All the cropping types are fully customizable.\n        \n        ### API Reference\n        **[Cropper API Reference](/api/classes/Cropper.html)**\n\n        ### Playground:\n      `}\n        </Markdown>\n      </Box>\n\n      <Box display=\"flex\">\n        <Box width=\"600px\" height=\"500px\">\n          <div\n            ref={ref}\n            style={{\n              background: '#ccc',\n              width: '100%',\n              height: '100%'\n            }}\n          />\n        </Box>\n\n        <Box flexGrow={1} ml={2}>\n          <CodeHighlighter language=\"typescript\">{code}</CodeHighlighter>\n        </Box>\n      </Box>\n\n      <Box my={2}>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleCrop}>\n          {isCropping ? 'Crop Image!' : 'Display Cropper!'}\n        </Button>\n      </Box>\n    </>\n  )\n}\n"],"sourceRoot":""}