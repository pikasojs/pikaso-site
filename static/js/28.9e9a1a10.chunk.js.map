{"version":3,"sources":["components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","pages/Core/Selection/index.tsx"],"names":["CodeHighlighter","children","props","style","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","skipHtml","remarkPlugins","gfm","components","a","href","target","to","code","node","inline","className","match","exec","String","replace","language","PreTag","Selection","usePikaso","selection","transformer","borderStroke","anchorFill","ref","editor","useEffect","shapes","image","insert","x","y","circle","fill","radius","label","container","tag","cornerRadius","text","fontSize","fontWeight","mb","margin","background","width","height","display","justifyContent","variant","size","sx","mr","onClick","board","deselectAll","shape","find","getClassName","toggle","moveX","moveY","selectAll"],"mappings":"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","file":"static/js/28.9e9a1a10.chunk.js","sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dracula as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// materialDark\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { Link } from 'react-router-dom'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      skipHtml\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        a({ href, children }) {\n          const isExternalLink =\n            href?.startsWith('/api/') || href?.startsWith('http')\n\n          return isExternalLink ? (\n            <a href={href} target=\"_blank\">\n              {children}\n            </a>\n          ) : (\n            <Link to={href!}>{children}</Link>\n          )\n        },\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useEffect } from 'react'\n\nimport { Box, Button, ButtonGroup } from '@mui/material'\nimport raw from 'raw.macro'\n\nimport usePikaso from 'src/hooks/use-pikaso'\nimport { Markdown } from 'src/components/Markdown'\n\nconst doc = raw('./doc.md')\n\nexport default function Selection() {\n  const [ref, editor] = usePikaso({\n    selection: {\n      transformer: {\n        borderStroke: '#262626',\n        anchorFill: '#262626'\n      }\n    }\n  })\n\n  useEffect(() => {\n    editor?.shapes.image.insert('/tiger.svg', {\n      x: 100,\n      y: 100\n    })\n\n    editor?.shapes.circle.insert({\n      fill: 'red',\n      radius: 50,\n      x: 500,\n      y: 100\n    })\n\n    editor?.shapes.label.insert({\n      container: {\n        x: 600,\n        y: 300\n      },\n      tag: {\n        fill: 'transparent',\n        cornerRadius: 0\n      },\n      text: {\n        text: \"Pikaso is great, isn't it?\",\n        fontSize: 40,\n        fontWeight: 'bold',\n        fill: 'purple'\n      }\n    })\n  }, [editor])\n\n  return (\n    <div>\n      <Markdown>{doc}</Markdown>\n\n      <Box mb={3}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#CBC3E3',\n            width: '100%',\n            height: '500px'\n          }}\n        />\n      </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mr: 1 }}\n          onClick={() => {\n            editor?.board.selection.deselectAll()\n\n            const shape = editor?.board.shapes.find(shape => {\n              return shape.node.getClassName() === 'Image'\n            })\n\n            editor?.board.selection.toggle(shape!)\n            editor?.board.selection.moveX(100)\n            editor?.board.selection.moveY(100)\n          }}\n        >\n          Select Image and Move\n        </Button>\n\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mr: 1 }}\n          onClick={() => {\n            const shape = editor?.board.shapes.find(shape => {\n              return shape.node.getClassName() === 'Circle'\n            })\n\n            editor?.board.selection.toggle(shape!)\n          }}\n        >\n          Toggle Circle\n        </Button>\n\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mr: 1 }}\n          onClick={() => {\n            editor?.board.selection.deselectAll()\n\n            editor?.board.selection.find(shape => {\n              return shape.node.getClassName() === 'Label'\n            })\n          }}\n        >\n          Select Label\n        </Button>\n\n        <ButtonGroup variant=\"outlined\" size=\"small\">\n          <Button onClick={() => editor?.selection.selectAll()}>\n            Select All\n          </Button>\n\n          <Button onClick={() => editor?.selection.deselectAll()}>\n            Deselect All\n          </Button>\n        </ButtonGroup>\n      </Box>\n    </div>\n  )\n}\n"],"sourceRoot":""}