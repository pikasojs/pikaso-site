{"version":3,"file":"static/js/8174.d0035de6.chunk.js","mappings":"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","sources":["components/BasePopover/index.tsx","components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","components/ExportBoard/index.tsx","components/ImportBoard/index.tsx","pages/Core/ImportExport/index.tsx","utils/get-random-color/index.ts","utils/get-random-number/index.ts"],"sourcesContent":["import { useState } from 'react'\nimport { Button, Popover } from '@mui/material'\n\ninterface ButtonProps {\n  id: string | undefined\n  isOpen: boolean\n}\n\ninterface Props {\n  buttonRenderer: (buttonProps: ButtonProps) => React.ReactNode\n  children:\n    | React.ReactNode\n    | (({ close }: { close: () => void }) => React.ReactNode)\n}\n\nexport function BasePopover({ buttonRenderer, children }: Props) {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null)\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n  const id = open ? `base-popover` : undefined\n\n  return (\n    <>\n      <Button\n        disableRipple\n        aria-describedby={id}\n        style={{\n          background: 'none',\n          cursor: 'pointer'\n        }}\n        onClick={handleOpen}\n      >\n        {buttonRenderer({\n          id,\n          isOpen: open\n        })}\n      </Button>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n      >\n        {typeof children === 'function'\n          ? children({ close: handleClose })\n          : children}\n      </Popover>\n    </>\n  )\n}\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dracula as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// materialDark\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { Link } from 'react-router-dom'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      skipHtml\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        a({ href, children }) {\n          const isExternalLink =\n            href?.startsWith('/api/') || href?.startsWith('http')\n\n          return isExternalLink ? (\n            <a href={href} target=\"_blank\">\n              {children}\n            </a>\n          ) : (\n            <Link to={href!}>{children}</Link>\n          )\n        },\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings, BaseShapes, RegisterShapesFn } from 'pikaso'\n\nexport default function usePikaso<T extends BaseShapes = BaseShapes>(\n  options: Partial<Settings> = {},\n  registerShapes?: RegisterShapesFn<T>\n): [RefObject<HTMLDivElement>, Pikaso<T> | null] {\n  const [instance, setInstance] = useState<Pikaso<T> | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso<T>(\n      {\n        container: ref.current as HTMLDivElement,\n        ...options\n      },\n      registerShapes\n    )\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","import { useState } from 'react'\nimport {\n  Box,\n  Button,\n  Chip,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  TextField\n} from '@mui/material'\nimport CloseIcon from '@mui/icons-material/Close'\n\nimport { Pikaso } from 'pikaso'\n\nimport { BasePopover } from '../BasePopover'\n\ninterface Props {\n  editor: Pikaso | null\n}\n\nexport function ExportBoard({ editor }: Props) {\n  const [result, setResult] = useState<{\n    type: 'image' | 'json'\n    data: string\n  } | null>(null)\n\n  const handleExportImage = () => {\n    if (!editor) {\n      return\n    }\n\n    const image = editor.export.toImage({\n      pixelRatio: 3\n    })\n\n    setResult({\n      type: 'image',\n      data: image\n    })\n  }\n\n  const handleExportJson = () => {\n    if (!editor) {\n      return\n    }\n\n    const json = editor.export.toJson()\n    setResult({\n      type: 'json',\n      data: JSON.stringify(json)\n    })\n  }\n\n  return (\n    <>\n      <BasePopover\n        buttonRenderer={({ id, isOpen }) => (\n          <Chip\n            aria-describedby={id}\n            size=\"medium\"\n            label={<strong>Export</strong>}\n            variant=\"outlined\"\n            color=\"info\"\n            sx={{\n              cursor: 'pointer',\n              borderColor: isOpen ? 'primary.main' : 'info',\n              color: isOpen ? 'primary.main' : 'info'\n            }}\n          />\n        )}\n      >\n        {({ close }) => (\n          <Box display=\"flex\" mx={2} my={2}>\n            <Button\n              variant=\"outlined\"\n              sx={{ mr: 1 }}\n              onClick={() => {\n                close()\n                handleExportImage()\n              }}\n            >\n              Image\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                close()\n                handleExportJson()\n              }}\n            >\n              Json\n            </Button>\n          </Box>\n        )}\n      </BasePopover>\n\n      <Dialog open={!!result} fullWidth maxWidth=\"md\">\n        <DialogTitle>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            Export as {result?.type}\n            <IconButton onClick={() => setResult(null)}>\n              <CloseIcon />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n\n        <DialogContent\n          style={{\n            overflow: 'hidden'\n          }}\n        >\n          {result?.type === 'image' && (\n            <Box width=\"100%\">\n              <img\n                src={result.data}\n                style={{\n                  border: '1px solid #ccc',\n                  borderRadius: '5px',\n                  maxWidth: '500px',\n                  margin: '0 auto',\n                  display: 'block'\n                }}\n              />\n            </Box>\n          )}\n\n          {result?.type === 'json' && (\n            <TextField\n              value={result.data ?? ''}\n              multiline\n              maxRows={20}\n              fullWidth\n              InputProps={{\n                readOnly: true\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import { Box, Button, Chip, Snackbar, TextField } from '@mui/material'\nimport { Pikaso } from 'pikaso'\nimport { ChangeEvent, useState } from 'react'\n\nimport { BasePopover } from '../BasePopover'\n\ninterface Props {\n  editor: Pikaso | null\n}\n\nexport function ImportBoard({ editor }: Props) {\n  const [value, setValue] = useState('')\n  const [error, setError] = useState('')\n\n  const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(e.target.value)\n  }\n\n  const handleImport = () => {\n    if (!editor) {\n      return\n    }\n\n    try {\n      JSON.parse(value)\n    } catch (e) {\n      setError('Invalid JSON Input')\n      return\n    }\n\n    editor.reset()\n\n    setTimeout(() => {\n      editor.load(value)\n    }, 1000)\n  }\n\n  return (\n    <>\n      <BasePopover\n        buttonRenderer={({ id, isOpen }) => (\n          <Chip\n            aria-describedby={id}\n            size=\"medium\"\n            label={<strong>Import</strong>}\n            variant=\"outlined\"\n            color=\"info\"\n            sx={{\n              cursor: 'pointer',\n              borderColor: isOpen ? 'primary.main' : 'info',\n              color: isOpen ? 'primary.main' : 'info'\n            }}\n          />\n        )}\n      >\n        {({ close }) => (\n          <Box mx={2} my={2} display=\"flex\" flexDirection=\"column\">\n            <div>\n              <TextField\n                maxRows={10}\n                multiline\n                label=\"Json Text\"\n                onChange={onChange}\n              />\n            </div>\n\n            <Button\n              variant=\"outlined\"\n              sx={{ mt: 1 }}\n              disabled={!value}\n              onClick={() => {\n                close()\n                handleImport()\n              }}\n            >\n              Import\n            </Button>\n          </Box>\n        )}\n      </BasePopover>\n\n      <Snackbar\n        open={!!error}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        autoHideDuration={6000}\n        onClose={() => setError('')}\n        message={error}\n      />\n    </>\n  )\n}\n","import { useEffect } from 'react'\nimport { useTitle } from 'react-use'\nimport { Box, Button } from '@mui/material'\nimport raw from 'raw.macro'\n\nimport usePikaso from 'src/hooks/use-pikaso'\nimport { Markdown } from 'src/components/Markdown'\nimport { ExportBoard } from 'src/components/ExportBoard'\nimport { ImportBoard } from 'src/components/ImportBoard'\nimport { getRandomNumber } from 'src/utils/get-random-number'\nimport { getRandomColor } from 'src/utils/get-random-color'\n\nconst doc = raw('./doc.md')\n\nexport default function ImportExport() {\n  useTitle('Pikaso | Core Components | Import/Export')\n  const [ref, editor] = usePikaso({\n    selection: {\n      transformer: {\n        borderStroke: '#262626',\n        anchorFill: '#262626'\n      }\n    }\n  })\n\n  useEffect(() => {\n    editor?.shapes.image.insert('/tiger.svg', {\n      x: 100,\n      y: 100\n    })\n\n    editor?.shapes.circle.insert({\n      fill: 'red',\n      radius: 50,\n      x: 500,\n      y: 100\n    })\n\n    editor?.shapes.label.insert({\n      container: {\n        x: 600,\n        y: 300\n      },\n      tag: {\n        fill: 'transparent',\n        cornerRadius: 0\n      },\n      text: {\n        text: \"Pikaso is great, isn't it?\",\n        fontSize: 40,\n        fontWeight: 'bold',\n        fill: 'purple'\n      }\n    })\n  }, [editor])\n\n  const handleAddCircle = () => {\n    if (!editor) {\n      return\n    }\n\n    editor.shapes.circle.insert({\n      radius: getRandomNumber(40, 80),\n      fill: getRandomColor(),\n      x: getRandomNumber(0, editor.board.stage.width() - 50),\n      y: getRandomNumber(0, editor.board.stage.height() - 50)\n    })\n  }\n\n  return (\n    <div>\n      <Markdown>{doc}</Markdown>\n\n      <Box mb={3}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#CBC3E3',\n            width: '100%',\n            height: '500px'\n          }}\n        />\n      </Box>\n\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <div>\n          <Button\n            color=\"secondary\"\n            sx={{ mr: 1 }}\n            onClick={() => editor?.reset()}\n          >\n            Reset Board\n          </Button>\n\n          <Button color=\"secondary\" onClick={handleAddCircle}>\n            Add Circle\n          </Button>\n        </div>\n\n        <div>\n          <ImportBoard editor={editor} />\n          <ExportBoard editor={editor} />\n        </div>\n      </Box>\n    </div>\n  )\n}\n","export function getRandomColor() {\n  const o = Math.round,\n    r = Math.random,\n    s = 255\n\n  return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ')'\n}\n","export function getRandomNumber(min: number, max: number): number {\n  return Math.random() * (max - min) + min\n}\n"],"names":["BasePopover","buttonRenderer","children","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","disableRipple","style","background","cursor","onClick","event","currentTarget","isOpen","onClose","anchorOrigin","vertical","horizontal","close","CodeHighlighter","props","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","skipHtml","remarkPlugins","gfm","components","a","href","target","to","code","node","inline","className","match","exec","String","replace","language","PreTag","usePikaso","options","registerShapes","instance","setInstance","ref","useRef","useEffect","editor","Pikaso","container","current","window","addEventListener","board","rescale","ExportBoard","result","setResult","Chip","size","label","variant","color","sx","borderColor","Box","display","mx","my","Button","mr","image","export","toImage","pixelRatio","type","data","handleExportImage","json","toJson","JSON","stringify","handleExportJson","Dialog","fullWidth","maxWidth","DialogTitle","justifyContent","IconButton","Close","DialogContent","overflow","width","src","border","borderRadius","margin","TextField","multiline","maxRows","InputProps","readOnly","ImportBoard","setValue","error","setError","onChange","e","flexDirection","mt","disabled","parse","reset","setTimeout","load","handleImport","Snackbar","autoHideDuration","message","ImportExport","useTitle","selection","transformer","borderStroke","anchorFill","shapes","insert","x","y","circle","fill","radius","tag","cornerRadius","text","fontSize","fontWeight","mb","height","getRandomNumber","getRandomColor","stage","o","Math","round","r","random","min","max"],"sourceRoot":""}