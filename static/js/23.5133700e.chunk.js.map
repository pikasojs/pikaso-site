{"version":3,"sources":["components/CodeHighlighter/index.tsx","components/Markdown/index.tsx","hooks/use-pikaso.ts","utils/get-random-color/index.ts","utils/get-random-number/index.ts","pages/Core/History/index.tsx"],"names":["CodeHighlighter","children","props","style","theme","showLineNumbers","wrapLongLines","Markdown","value","normalized","useMemo","input","output","values","split","skipTrim","isCodeBlock","startsWith","i","length","push","trim","join","normalizeText","skipHtml","remarkPlugins","gfm","components","a","href","target","to","code","node","inline","className","match","exec","String","replace","language","PreTag","usePikaso","options","registerShapes","useState","instance","setInstance","ref","useRef","useEffect","editor","Pikaso","container","current","window","addEventListener","board","rescale","getRandomColor","o","Math","round","r","random","getRandomNumber","min","max","History","useTitle","selection","transformer","borderStroke","anchorFill","Array","fill","forEach","handleAddCircle","shapes","circle","insert","radius","x","stage","width","y","height","mb","margin","background","display","justifyContent","variant","sx","mr","size","onClick","undo","reset","redo","color"],"mappings":"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","file":"static/js/23.5133700e.chunk.js","sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dracula as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// materialDark\n\nimport type { SyntaxHighlighterProps } from 'react-syntax-highlighter'\n\ninterface Props extends SyntaxHighlighterProps {\n  children: string\n}\n\nexport function CodeHighlighter({ children, ...props }: Props) {\n  return (\n    <SyntaxHighlighter style={theme} showLineNumbers wrapLongLines {...props}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import { useMemo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { Link } from 'react-router-dom'\n\nimport { CodeHighlighter } from '../CodeHighlighter'\n\ninterface Props {\n  children: string | (() => string)\n}\n\nfunction normalizeText(input: string): string {\n  const output = []\n  const values = input.split('\\n')\n  let skipTrim = false\n\n  const isCodeBlock = (value = '') =>\n    value.startsWith('```') || value.startsWith('~~~')\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (isCodeBlock(value)) {\n      skipTrim = true\n    }\n\n    output.push(skipTrim ? value : value.trim())\n\n    if (skipTrim && isCodeBlock(values[i + 1])) {\n      skipTrim = false\n    }\n  }\n\n  return output.join('\\n')\n}\n\nexport function Markdown({ children }: Props) {\n  const value = typeof children === 'string' ? children : children()\n  const normalized = useMemo(() => normalizeText(value), [value])\n\n  return (\n    <ReactMarkdown\n      skipHtml\n      remarkPlugins={[gfm]}\n      children={normalized}\n      components={{\n        a({ href, children }) {\n          const isExternalLink =\n            href?.startsWith('/api/') || href?.startsWith('http')\n\n          return isExternalLink ? (\n            <a href={href} target=\"_blank\">\n              {children}\n            </a>\n          ) : (\n            <Link to={href!}>{children}</Link>\n          )\n        },\n        code({ node, inline, className, children, ...props }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            // @ts-ignore\n            <CodeHighlighter\n              children={String(children).replace(/\\n$/, '')}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    />\n  )\n}\n","import { useRef, useState, useEffect, RefObject } from 'react'\n\nimport { Pikaso } from 'pikaso'\nimport type { Settings, BaseShapes, RegisterShapesFn } from 'pikaso'\n\nexport default function usePikaso<T extends BaseShapes = BaseShapes>(\n  options: Partial<Settings> = {},\n  registerShapes?: RegisterShapesFn<T>\n): [RefObject<HTMLDivElement>, Pikaso<T> | null] {\n  const [instance, setInstance] = useState<Pikaso<T> | null>(null)\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const editor = new Pikaso<T>(\n      {\n        container: ref.current as HTMLDivElement,\n        ...options\n      },\n      registerShapes\n    )\n\n    setInstance(editor)\n  }, [])\n\n  useEffect(() => {\n    instance &&\n      window.addEventListener('resize', () => {\n        instance.board.rescale()\n      })\n  }, [instance])\n\n  return [ref, instance]\n}\n","export function getRandomColor() {\n  const o = Math.round,\n    r = Math.random,\n    s = 255\n\n  return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ')'\n}\n","export function getRandomNumber(min: number, max: number): number {\n  return Math.random() * (max - min) + min\n}\n","import { useEffect } from 'react'\nimport { Box, Button, ButtonGroup } from '@mui/material'\nimport { useTitle } from 'react-use'\nimport raw from 'raw.macro'\n\nimport usePikaso from 'src/hooks/use-pikaso'\nimport { Markdown } from 'src/components/Markdown'\nimport { getRandomNumber } from 'src/utils/get-random-number'\nimport { getRandomColor } from 'src/utils/get-random-color'\n\nconst doc = raw('./doc.md')\n\nexport default function History() {\n  useTitle('Pikaso | Core Components | History')\n  const [ref, editor] = usePikaso({\n    selection: {\n      transformer: {\n        borderStroke: '#262626',\n        anchorFill: '#262626'\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (editor) {\n      new Array(20).fill(null).forEach(() => handleAddCircle())\n    }\n  }, [editor])\n\n  const handleAddCircle = () => {\n    if (!editor) {\n      return\n    }\n\n    editor.shapes.circle.insert({\n      radius: getRandomNumber(40, 80),\n      fill: getRandomColor(),\n      x: getRandomNumber(0, editor.board.stage.width() - 50),\n      y: getRandomNumber(0, editor.board.stage.height() - 50)\n    })\n  }\n\n  return (\n    <div>\n      <Markdown>{doc}</Markdown>\n\n      <Box mb={3}>\n        <div\n          ref={ref}\n          style={{\n            margin: '0 auto',\n            background: '#CBC3E3',\n            width: '100%',\n            height: '300px'\n          }}\n        />\n      </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <ButtonGroup variant=\"outlined\" sx={{ mr: 2 }}>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={() => editor?.undo()}\n          >\n            Undo\n          </Button>\n\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={() => editor?.reset()}\n          >\n            Reset\n          </Button>\n\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={() => editor?.redo()}\n          >\n            Redo\n          </Button>\n        </ButtonGroup>\n\n        <Button\n          size=\"small\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={handleAddCircle}\n        >\n          Create Circle\n        </Button>\n      </Box>\n    </div>\n  )\n}\n"],"sourceRoot":""}