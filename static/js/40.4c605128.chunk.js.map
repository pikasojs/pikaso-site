{"version":3,"sources":["components/BasePopover/index.tsx","pages/Core/Cropper/Playground/CropperType/index.tsx"],"names":["BasePopover","buttonRenderer","children","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","disableRipple","style","background","cursor","onClick","event","currentTarget","isOpen","onClose","anchorOrigin","vertical","horizontal","close","Types","fixed","circular","CropperType","config","onChange","size","label","variant","color","sx","borderColor","px","py","maxWidth","map","type","index","mr","mb","width"],"mappings":"mNAeO,SAASA,EAAT,GAA2D,IAApCC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,SAC5C,EAAgCC,mBAAmC,MAAnE,mBAAOC,EAAP,KAAiBC,EAAjB,KAMMC,EAAc,WAClBD,EAAY,OAGRE,EAAOC,QAAQJ,GACfK,EAAKF,EAAI,oBAAoBG,EAEnC,OACE,qCACE,cAAC,IAAD,CACEC,eAAa,EACb,mBAAkBF,EAClBG,MAAO,CACLC,WAAY,OACZC,OAAQ,WAEVC,QApBa,SAACC,GAClBX,EAAYW,EAAMC,gBAYhB,SASGhB,EAAe,CACdQ,KACAS,OAAQX,MAIZ,cAAC,IAAD,CACEE,GAAIA,EACJF,KAAMA,EACNH,SAAUA,EACVe,QAASb,EACTc,aAAc,CACZC,SAAU,SACVC,WAAY,QAPhB,SAUuB,oBAAbpB,EACJA,EAAS,CAAEqB,MAAOjB,IAClBJ,S,gCC1DZ,kGAKMsB,EAAQ,CACZ,CACEC,OAAO,EACPC,UAAU,GAEZ,CACED,OAAO,EACPC,UAAU,GAEZ,CACED,OAAO,EACPC,UAAU,GAEZ,CACED,OAAO,EACPC,UAAU,IASP,SAASC,EAAT,GAAmD,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,SACpC,OACE,cAAC,IAAD,CACE5B,eAAgB,gBAAGQ,EAAH,EAAGA,GAAIS,EAAP,EAAOA,OAAP,OACd,cAAC,IAAD,CACE,mBAAkBT,EAClBqB,KAAK,SACLC,MACE,qCACE,iCAASH,EAAOH,MAAQ,QAAU,aACjC,MACD,iCAASG,EAAOF,SAAW,WAAa,mBAG5CM,QAAQ,WACRC,MAAM,OACNC,GAAI,CACFpB,OAAQ,UACRqB,YAAajB,EAAS,eAAiB,OACvCe,MAAOf,EAAS,eAAiB,WAjBzC,SAsBG,gBAAGK,EAAH,EAAGA,MAAH,OACC,cAAC,IAAD,CAAKW,GAAI,CAAEE,GAAI,EAAGC,GAAI,EAAGC,SAAU,SAAnC,SACGd,EAAMe,KAAI,SAACC,EAAMC,GAAP,OACT,eAAC,IAAD,CAEET,QACEQ,EAAKf,QAAUG,EAAOH,OAASe,EAAKd,WAAaE,EAAOF,SACpD,YACA,WAENI,KAAK,QACLI,GAAI,CAAEQ,GAAI,EAAGC,GAAI,EAAGC,MAAO,SAC3B7B,QAAS,WACPQ,IACAM,EAAS,CACPJ,MAAOe,EAAKf,MACZC,SAAUc,EAAKd,YAbrB,UAiBGc,EAAKf,MAAQ,QAAU,WAjB1B,KAiBwC,IACrCe,EAAKd,SAAW,WAAa,gBAjBzBe","file":"static/js/40.4c605128.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Button, Popover } from '@mui/material'\n\ninterface ButtonProps {\n  id: string | undefined\n  isOpen: boolean\n}\n\ninterface Props {\n  buttonRenderer: (buttonProps: ButtonProps) => React.ReactNode\n  children:\n    | React.ReactNode\n    | (({ close }: { close: () => void }) => React.ReactNode)\n}\n\nexport function BasePopover({ buttonRenderer, children }: Props) {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null)\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n  const id = open ? `base-popover` : undefined\n\n  return (\n    <>\n      <Button\n        disableRipple\n        aria-describedby={id}\n        style={{\n          background: 'none',\n          cursor: 'pointer'\n        }}\n        onClick={handleOpen}\n      >\n        {buttonRenderer({\n          id,\n          isOpen: open\n        })}\n      </Button>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n      >\n        {typeof children === 'function'\n          ? children({ close: handleClose })\n          : children}\n      </Popover>\n    </>\n  )\n}\n","import { Box, Button, Chip } from '@mui/material'\nimport type { CropperOptions } from 'pikaso'\n\nimport { BasePopover } from 'src/components/BasePopover'\n\nconst Types = [\n  {\n    fixed: false,\n    circular: false\n  },\n  {\n    fixed: false,\n    circular: true\n  },\n  {\n    fixed: true,\n    circular: false\n  },\n  {\n    fixed: true,\n    circular: true\n  }\n]\n\ninterface Props {\n  config: Partial<CropperOptions>\n  onChange: (config: { fixed: boolean; circular: boolean }) => void\n}\n\nexport function CropperType({ config, onChange }: Props) {\n  return (\n    <BasePopover\n      buttonRenderer={({ id, isOpen }) => (\n        <Chip\n          aria-describedby={id}\n          size=\"medium\"\n          label={\n            <>\n              <strong>{config.fixed ? 'Fixed' : 'Flexible'}</strong>\n              {' - '}\n              <strong>{config.circular ? 'Circular' : 'Rectangular'}</strong>\n            </>\n          }\n          variant=\"outlined\"\n          color=\"info\"\n          sx={{\n            cursor: 'pointer',\n            borderColor: isOpen ? 'primary.main' : 'info',\n            color: isOpen ? 'primary.main' : 'info'\n          }}\n        />\n      )}\n    >\n      {({ close }) => (\n        <Box sx={{ px: 2, py: 2, maxWidth: '450px' }}>\n          {Types.map((type, index) => (\n            <Button\n              key={index}\n              variant={\n                type.fixed === config.fixed && type.circular === config.circular\n                  ? 'contained'\n                  : 'outlined'\n              }\n              size=\"small\"\n              sx={{ mr: 1, mb: 1, width: '200px' }}\n              onClick={() => {\n                close()\n                onChange({\n                  fixed: type.fixed,\n                  circular: type.circular\n                })\n              }}\n            >\n              {type.fixed ? 'Fixed' : 'Flexible'} &{' '}\n              {type.circular ? 'Circular' : 'Rectangular'}\n            </Button>\n          ))}\n        </Box>\n      )}\n    </BasePopover>\n  )\n}\n"],"sourceRoot":""}